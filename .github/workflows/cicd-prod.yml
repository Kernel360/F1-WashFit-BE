name: Project CI/CD with AWS

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Replace SQL Queries
        run: |
          dir_path="./module-domain/src/main/resources/db/migration"
          old_text="changeRequired"
          new_text="${{ secrets.PUBLIC_KEY }}"
          find "$dir_path" -type f -name "*.sql" -exec sed -i "s|$old_text|$new_text|g" {} +

      - name: Set application yml file (api)
        uses: microsoft/variable-substitution@v1
        with:
          files: ./module-api/src/main/resources/application.yml
        env:
          spring.profiles.active: "prod"

      - name: Set application yml file (batch)
        uses: microsoft/variable-substitution@v1
        with:
          files: ./module-batch/src/main/resources/application.yml
        env:
          spring.profiles.active: "prod"

      - name: Set application-prod yml file (api)
        uses: microsoft/variable-substitution@v1
        with:
          files: ./module-api/src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL_AWS }}
          spring.datasource.username: ${{ secrets.DB_USER }}
          spring.datasource.password: ${{ secrets.DB_PW }}
          spring.mail.username: ${{ secrets.SMTP_GOOGLE_EMAIL }}
          spring.mail.password: ${{ secrets.SMTP_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_PROD_HOST }}
          spring.data.redis.password: ${{ secrets.REDIS_PROD_PASSWORD }}
          constants.host-url: ${{ secrets.PROD_HOST_URL }}
          aws.credentials.access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws.credentials.secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws.s3.bucket.name: ${{ secrets.AWS_S3_BUCKET_NAME }}
          aws.s3.bucket.url: ${{ secrets.AWS_S3_BUCKET_URL }}

      - name: Set application-dev yml file (batch)
        uses: microsoft/variable-substitution@v1
        with:
          files: ./module-batch/src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL_AWS }}
          spring.datasource.username: ${{ secrets.DB_USER }}
          spring.datasource.password: ${{ secrets.DB_PW }}
          external.ecolife-api.path: ${{ secrets.ECOLIFE_PATH }}
          external.ecolife-api.service-key: ${{ secrets.ECOLIFE_KEY }}

      - name: Grant execute permission And Build with Gradle (api)
        working-directory: ./module-api
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -PapiDocNeeded=false

      - name: Grant execute permission And Build with Gradle (batch)
        working-directory: ./module-batch
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR (api)
        working-directory: ./module-api
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: washfit-api
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push docker image to Amazon ECR (batch)
        working-directory: ./module-batch
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: washfit-batch
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Application Run
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            # Install Docker and Docker Compose
            sudo dnf update
            sudo dnf install docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Docker Compose
            mkdir -p deploy
            cd deploy
            sudo echo "${{ secrets.PROD_REDIS_CONF }}" > ./redis/redis.conf
            sudo echo "${{ secrets.DOCKER_COMPOSE_AWS }}" > docker-compose.yml
            
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}           
            
            docker image prune -af
            
            docker-compose pull
            docker-compose down
            docker-compose up -d